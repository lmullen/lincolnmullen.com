<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clio 3: Programming in History/New Media</title>
    <description></description>
    <link>http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/</link>
    <atom:link href="http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 12 Nov 2014 19:18:08 -0500</pubDate>
    <lastBuildDate>Wed, 12 Nov 2014 19:18:08 -0500</lastBuildDate>
    <generator>Jekyll v2.3.0</generator>
    
      <item>
        <title>Week 12: D3.js Interactivity</title>
        <description>&lt;h3 id=&quot;starting-a-server&quot;&gt;Starting a server:&lt;/h3&gt;
&lt;p&gt;In Python 2.x:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python -m SimpleHTTPServer 8000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In Python 3.x:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python -m http.server 8000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In Ruby:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ruby -run -e httpd . -p 8000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Quit with &lt;code&gt;CTRL + c&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;download-helper-files&quot;&gt;Download helper files&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/lmullen/add345462d3ae2135c32&quot;&gt;The gist&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://gist.github.com/lmullen/add345462d3ae2135c32.git interactivity&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;interactivity&lt;/code&gt; folder and start a server.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Nov 2014 00:00:00 -0500</pubDate>
        <link>http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/11/12/week-eleven/</link>
        <guid isPermaLink="true">http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/11/12/week-eleven/</guid>
        
        
      </item>
    
      <item>
        <title>Week 11: D3.js</title>
        <description>&lt;h3 id=&quot;starting-a-server&quot;&gt;Starting a server:&lt;/h3&gt;
&lt;p&gt;In Python 2.x:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python -m SimpleHTTPServer 8000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In Python 3.x:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python -m http.server 8000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In Ruby:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ruby -run -e httpd . -p 8000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Quit with &lt;code&gt;CTRL + c&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;download-helper-files&quot;&gt;Download helper files&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/lmullen/1a6066590038df165f95&quot;&gt;The gist&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://gist.github.com/1a6066590038df165f95.git&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Nov 2014 00:00:00 -0500</pubDate>
        <link>http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/11/05/week-ten/</link>
        <guid isPermaLink="true">http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/11/05/week-ten/</guid>
        
        
      </item>
    
      <item>
        <title>Week 9: Text Analysis</title>
        <description>&lt;p&gt;Kinds of techniques&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Word, n-gram, sentence, paragraph tokenization, arbitrary chunking&lt;/li&gt;
&lt;li&gt;Word usage&lt;/li&gt;
&lt;li&gt;Document clustering&lt;/li&gt;
&lt;li&gt;Topic modeling&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rpubs.com/lmullen/34069&quot;&gt;Named entity recognition&lt;/a&gt;: people, places&lt;/li&gt;
&lt;li&gt;Part of speech tagging&lt;/li&gt;
&lt;li&gt;Sentiment analysis&lt;/li&gt;
&lt;li&gt;Stylometrics&lt;/li&gt;
&lt;li&gt;Text reuse (sometimes called text alignment)&lt;/li&gt;
&lt;li&gt;Classification, models, and machine learning&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your solutions.&lt;/p&gt;
&lt;p&gt;Jeri on &lt;a href=&quot;http://www.nltk.org/&quot;&gt;NLTK&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pete on &lt;a href=&quot;http://cran.r-project.org/web/packages/httr/index.html&quot;&gt;httr&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Civil codes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lincolnmullen.com/files/civil-procedure-codes.zip&quot;&gt;Zip file with the codes&lt;/a&gt;. The OCR is tolerable, but not great.&lt;/li&gt;
&lt;li&gt;NY 1850 is the original.&lt;/li&gt;
&lt;li&gt;NC 1868 is probably borrowed from NY 1850.&lt;/li&gt;
&lt;li&gt;CA 1851 is probably borrowed from NY 1850.&lt;/li&gt;
&lt;li&gt;AZ 1865 is definitely borrowed from CA 1851.&lt;/li&gt;
&lt;li&gt;UT 1853 probably has no relationship to any of the other codes.&lt;/li&gt;
&lt;li&gt;How can you tell which codes are like other codes?&lt;/li&gt;
&lt;li&gt;Can you identify the places in the codes that are borrowed?&lt;/li&gt;
&lt;li&gt;Can you get the comparisons into a format for clustering/plotting?&lt;/li&gt;
&lt;li&gt;Can you work around the problem of bad OCR?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My &lt;a href=&quot;http://rpubs.com/lmullen/24945&quot;&gt;attempt&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/10/22/week-nine/</link>
        <guid isPermaLink="true">http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/10/22/week-nine/</guid>
        
        
      </item>
    
      <item>
        <title>Week 8</title>
        <description>&lt;h3 id=&quot;r-language-features&quot;&gt;R language features&lt;/h3&gt;
&lt;p&gt;JavaScript scalars and arrays&lt;/p&gt;
&lt;p&gt;R vectors&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;length(&amp;quot;How long is this string&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vector operations:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c(1, 2, 3) + c(4, 5, 6)

c(1, 2, 3) + 1

c(1, 2, 3) + c(1, 2)

c(1, 2, 3, 4) + c(1, 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vector subscripting&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;letters
letters[1:5]

mtcars
mtcars[1,]
mtcars[,1]

mtcars$cyl&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Logical subsetting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;letters == &amp;quot;c&amp;quot;
letters[letters == &amp;quot;c&amp;quot;]

letters %in% c(&amp;quot;a&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;o&amp;quot;, &amp;quot;u&amp;quot;)
letters[letters %in% c(&amp;quot;a&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;o&amp;quot;, &amp;quot;u&amp;quot;)]

mtcars$cyl == 4
mtcars[mtcars$cyl == 4, ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Coercion:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c(1, &amp;quot;2&amp;quot;)
c(FALSE, TRUE, &amp;quot;String&amp;quot;)
c(1, 2, FALSE, TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sample function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my_func &amp;lt;- function() {
  return(1)
}

my_func()
my_func&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lists:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my_list &amp;lt;- list(let = letters, num = 1:26)

my_list

my_list$let
class(my_list$let)

my_list[&amp;quot;let&amp;quot;]
class(my_list[&amp;quot;let&amp;quot;])


my_list[[&amp;quot;let&amp;quot;]]
class(my_list[[&amp;quot;let&amp;quot;]])

my_list[1]
class(my_list[1])


my_list[[1]]
class(my_list[[1]])

my_nested_list &amp;lt;- list(first = &amp;quot;Orestes&amp;quot;,
                       last  = &amp;quot;Brownson&amp;quot;,
                       occupation = list(title = &amp;quot;editor&amp;quot;,
                                          firm  = &amp;quot;Brownson&amp;#39;s Quarterly Review&amp;quot;),

                       religion = list(denomination = &amp;quot;Roman Catholic&amp;quot;,
                                       converted = as.Date(&amp;quot;1844-10-20&amp;quot;)
                       ))

str(my_nested_list)
my_nested_list$religion$converted

my_data &amp;lt;- list(mtcars = mtcars, judges = USJudgeRatings)
str(my_data, max.level = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Special functions and syntactic sugar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`+`
`+`(2, 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Function redefinition&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2 + 2

# Careful now
`+` &amp;lt;- `-`

2 + 2&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;rvest-tutorial-from-george&quot;&gt;rvest tutorial from George&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hadley/rvest&quot;&gt;rvest&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;functional-programming&quot;&gt;Functional programming&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://lincolnmullen.com/files/tracts-for-the-times.zip&quot;&gt;Tracts for the Times&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;File loading madness:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;file1 &amp;lt;- read.csv(&amp;quot;file1.csv&amp;quot;)
file2 &amp;lt;- read.csv(&amp;quot;file2.csv&amp;quot;)
# ...
file999 &amp;lt;- read.csv(&amp;quot;file999.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A better way:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Old
tract01 &amp;lt;- scan(&amp;quot;tract01.txt&amp;quot;, what = &amp;quot;character&amp;quot;, sep = &amp;quot;\n&amp;quot;)

# New
file_names &amp;lt;- c(&amp;quot;tract01.txt&amp;quot;, &amp;quot;tract02.txt&amp;quot;, &amp;quot;tract03.txt&amp;quot;)
tracts &amp;lt;- lapply(file_names, scan, what = &amp;quot;character&amp;quot;, sep = &amp;quot;\n&amp;quot;)

str(tracts)
tracts[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even better:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;file_names &amp;lt;- Sys.glob(&amp;quot;tract*.txt&amp;quot;)
tracts &amp;lt;- lapply(file_names, scan, what = &amp;quot;character&amp;quot;, sep = &amp;quot;\n&amp;quot;)

str(tracts)
tracts[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use &lt;code&gt;lapply()&lt;/code&gt; and &lt;code&gt;sapply()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lapply(tracts, length)
sapply(tracts, length)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Join the items in a list together:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;word_bag &amp;lt;- unlist(files)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For a list of data frames (if you had read in a bunch of CSVs), try &lt;code&gt;rbind_all(list_of_df)&lt;/code&gt; from dplyr.&lt;/p&gt;
&lt;p&gt;What is happening here?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;add_one &amp;lt;- function(x) { x + 1 }

lapply(1:10, add_one)
sapply(1:10, add_one)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;introduction-to-assignments&quot;&gt;Introduction to assignments&lt;/h3&gt;
&lt;h3 id=&quot;jeri-on-mental-mapping&quot;&gt;Jeri on mental mapping&lt;/h3&gt;
</description>
        <pubDate>Wed, 15 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/10/15/week-eight/</link>
        <guid isPermaLink="true">http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/10/15/week-eight/</guid>
        
        
      </item>
    
      <item>
        <title>Week 7: Mapping</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://lincolnmullen.com/projects/slavery/&quot;&gt;Spread of US slavery&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lmullen/mapping-slavery-starter-kit&quot;&gt;Mapping slavery starter kit&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/lmullen/mapping-slavery-starter-kit&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 08 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/10/08/week-seven/</link>
        <guid isPermaLink="true">http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/10/08/week-seven/</guid>
        
        
      </item>
    
      <item>
        <title>Week 5: Data Structures</title>
        <description>&lt;h2 id=&quot;plots&quot;&gt;Plots&lt;/h2&gt;
&lt;h2 id=&quot;knitr-for-reproducible-research&quot;&gt;Knitr for Reproducible Research&lt;/h2&gt;
&lt;h2 id=&quot;plotting-naval-promotions&quot;&gt;Plotting Naval Promotions&lt;/h2&gt;
</description>
        <pubDate>Wed, 24 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/09/24/week-five/</link>
        <guid isPermaLink="true">http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/09/24/week-five/</guid>
        
        
      </item>
    
      <item>
        <title>Week 4: Data Structures</title>
        <description>&lt;ul&gt;
&lt;li&gt;Five minute map of the class&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;modeling-presidential-elections&quot;&gt;Modeling presidential elections&lt;/h2&gt;
&lt;p&gt;Can you create a data model for &lt;a href=&quot;http://en.wikipedia.org/wiki/United_States_presidential_election&quot;&gt;presidential elections&lt;/a&gt;? With a constructor function? Can you loop through the elections to &lt;code&gt;document.write()&lt;/code&gt; or &lt;code&gt;console.log()&lt;/code&gt; information about the elections?&lt;/p&gt;
&lt;h2 id=&quot;modeling-your-own-data&quot;&gt;Modeling your own data&lt;/h2&gt;
&lt;p&gt;Working in small groups to go over your own data and take it to the next level on the basis of what we did with the presidential elections.&lt;/p&gt;
&lt;h2 id=&quot;exploring-the-converts-database&quot;&gt;Exploring the Converts database&lt;/h2&gt;
&lt;p&gt;Data out in the wild is complex! A &lt;a href=&quot;https://gist.github.com/lmullen/02aeaddb1e8802307823&quot;&gt;starter kit&lt;/a&gt; for extracting data from the converts database.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://gist.github.com/02aeaddb1e8802307823.git converts-db&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What can you do with the data?&lt;/p&gt;
&lt;h2 id=&quot;brief-introduction-to-r&quot;&gt;Brief introduction to R&lt;/h2&gt;
&lt;p&gt;A &lt;a href=&quot;https://gist.github.com/ed7c7d749696a5f74277&quot;&gt;starter kit&lt;/a&gt; for plotting in R.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://gist.github.com/ed7c7d749696a5f74277.git first-plot&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 17 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/09/17/week-four/</link>
        <guid isPermaLink="true">http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/09/17/week-four/</guid>
        
        
      </item>
    
      <item>
        <title>Week 3: Introduction to JavaScript</title>
        <description>&lt;h2 id=&quot;housekeeping&quot;&gt;Housekeeping&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tutorial schedule &lt;a href=&quot;lincolnmullen.com/courses/clio3.2014/schedule/&quot;&gt;posted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How much of the assignments should you get done?&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lincolnmullen.com/courses/clio3.2014/2014/09/09/how-to-submit-an-assignment-js/&quot;&gt;How to Submit Your Code: JavaScript Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Minimal HTML for leading a JavaScript file:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://d3js.org/d3.v3.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;script.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;javascript-overview&quot;&gt;JavaScript overview&lt;/h2&gt;
&lt;p&gt;Why JavaScript:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Obligatory for the web&lt;/li&gt;
&lt;li&gt;Great for interactive programming&lt;/li&gt;
&lt;li&gt;Great for visualizations&lt;/li&gt;
&lt;li&gt;Absurdly permissive&lt;/li&gt;
&lt;li&gt;Woefully inconsistent (but we’ll escape most of this)&lt;/li&gt;
&lt;li&gt;Inadequate standard libraries&lt;/li&gt;
&lt;li&gt;But lots of JavaScript programmers out there&lt;/li&gt;
&lt;li&gt;Good for learning the basics&lt;/li&gt;
&lt;li&gt;Homologous to R&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why functions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A good programming language … provides convenient building blocks (such as &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;console.log&lt;/code&gt;), allows you to define your own building blocks (such as &lt;code&gt;sum&lt;/code&gt; and &lt;code&gt;range&lt;/code&gt;), and makes it easy to compose these blocks. (From &lt;em&gt;&lt;a href=&quot;http://eloquentjavascript.net/00_intro.html&quot;&gt;Eloquent JavaScript&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Programming is about taking complex ideas and breaking them down into combinations of simple ideas. Simple ideas are functions. Functions are the vocabulary: you provide it. The grammar is the relationship between vocabularies provided by the language.&lt;/p&gt;
&lt;h2 id=&quot;basics-of-javascript&quot;&gt;Basics of JavaScript:&lt;/h2&gt;
&lt;p&gt;Assignment: &lt;code&gt;var myVariable = &amp;quot;some value&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Types of values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number: &lt;code&gt;var a = 1;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Strings: &lt;code&gt;var a = &amp;quot;my string&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Boolean: &lt;code&gt;var a = true;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Arrays: &lt;code&gt;var a = [1, 2, 3];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Objects: &lt;code&gt;var a = {title: &amp;quot;Clio 3&amp;quot;, courseNumber: &amp;quot;HIST 698&amp;quot;};&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Functions: &lt;code&gt;var myFunction = function(arg) { return arg; }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some basic operators and functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;typeof&lt;/code&gt; (and automatic type conversion)&lt;/li&gt;
&lt;li&gt;Arithmetic: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Comparison: &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Boolean: &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.write()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Functions:&lt;/p&gt;
&lt;p&gt;To call a function: &lt;code&gt;console.log(&amp;quot;My string&amp;quot;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To define a function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Defined at parse time&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Defined at run time&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Some functions are called for their side effects. In all other cases, write functions that return a value without changing the input (a pure function).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A pure function is a specific kind of value-producing function that not only has no side effects but also doesn’t rely on side effects from other code—for example, it doesn’t read global variables that are occasionally changed by other code. A pure function has the pleasant property that, when called with the same arguments, it always produces the same value (and doesn’t do anything else). This makes it easy to reason about. (From &lt;em&gt;&lt;a href=&quot;http://eloquentjavascript.net/03_functions.html&quot;&gt;Eloquent Javascript&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Scope: “In short, each local scope can also see all the local scopes that contain it.” And, “Functions are the only things that create a new scope.”&lt;/p&gt;
&lt;p&gt;Conditionals or flow control:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;exercises&quot;&gt;Exercises&lt;/h2&gt;
&lt;p&gt;Break into groups and come back to explain solutions to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FizzBuzz&lt;/li&gt;
&lt;li&gt;Bean Counting&lt;/li&gt;
&lt;li&gt;Recursive Even (if you have extra time)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/lmullen/1ea04c2c8e1cebd778b6&quot;&gt;My solutions&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;in-class-programming&quot;&gt;In-class programming&lt;/h2&gt;
&lt;p&gt;Write a JavaScript program that randomly selects a student in the class.&lt;/p&gt;
&lt;p&gt;Then write a JavaScript program that randomly assigns the class into small groups.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/lmullen/999d7862bee71a29bc39&quot;&gt;A Gist&lt;/a&gt; to get you started.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://gist.github.com/999d7862bee71a29bc39.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Suggested steps for thinking through the problem:&lt;/p&gt;
&lt;ol start=&quot;0&quot; type=&quot;1&quot;&gt;
&lt;li&gt;What will the inputs and outputs be?&lt;/li&gt;
&lt;li&gt;How do you do randomization in JavaScript?&lt;/li&gt;
&lt;li&gt;Make it work.&lt;/li&gt;
&lt;li&gt;What about edge cases?&lt;/li&gt;
&lt;li&gt;Can the function be customized?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/lmullen/2a937ce981bd400ba62f&quot;&gt;My solution&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;real-historical-data&quot;&gt;Real Historical Data&lt;/h2&gt;
&lt;p&gt;We will use D3.js to access the &lt;a href=&quot;http://americanconverts.org/&quot;&gt;American Converts Database&lt;/a&gt;. That site has an API thanks to Omeka.&lt;/p&gt;
&lt;p&gt;Clone &lt;a href=&quot;https://gist.github.com/lmullen/02aeaddb1e8802307823&quot;&gt;this Gist&lt;/a&gt; to get the starter files:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://gist.github.com/02aeaddb1e8802307823.git&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;tough-stuff&quot;&gt;Tough stuff&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Closures&lt;/li&gt;
&lt;li&gt;Recursion&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 10 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/09/10/week-three/</link>
        <guid isPermaLink="true">http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/09/10/week-three/</guid>
        
        
      </item>
    
      <item>
        <title>How to Submit Your Code: JavaScript Edition</title>
        <description>&lt;p&gt;As you become more familiar with GitHub, Stack Overflow, and development mailing lists, you’ll often see some variation on the phrase: “can you provide a minimal reproducible example.” Usually someone has reported a problem, and the programmer responding is asking the questioner to provide the simplest possible code that demonstrates the problem. The request for a minimal reproducible example is also a request to make efficient use of the developer’s time by providing code that is easy to run.&lt;/p&gt;
&lt;p&gt;The habit of providing minimal reproducible examples is a good one to get in. The simplest reason is that you won’t be able to get past the gatekeepers unless you submit your code in the form they want. More importantly, being able to isolate a problem is a key skill of a programmer. And finally, code is meant to be run as much as it is meant to be read. So you have to provide your code to people in a way that they can run it easily.&lt;/p&gt;
&lt;p&gt;That’s a lengthy preface to an explanation of how to submit code for this course. Here is how to submit the weekly assignments for JavaScript code in that way that will be most useful to the classmates with whom you will collaborate and to yourself. (And of course, to me.)&lt;/p&gt;
&lt;p&gt;Here are the three key principles:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Your code should be version-controlled. This means that it should be in Git and on GitHub. But more importantly, it means that instead of keeping different attempts at an assignment in the same file, you should keep the different attempts in different commits. (You’ll probably make it easier on yourself if you use a different repository each week.)&lt;/li&gt;
&lt;li&gt;Your code should be runnable. For JavaScript that means that I should be able to open an HTML file, look at the console, and see the results.&lt;/li&gt;
&lt;li&gt;Your code should be documented. Explain each function with documentation, and if there is anything else that someone needs to know, put it in the README. Don’t go crazy with documentation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That is all abstract, so let’s try an example. Suppose you’ve been asked to write a function that greets Clio 3. In a new directory, we’ll create a Git repository. In a file called &lt;code&gt;hello.js&lt;/code&gt;, you might make your first attempt at the assignment.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Takes a message and prints it to the console&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, Clio 3.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;But we also need a way to run our code. The easiest way to do that is to create a bare bones HTML file (&lt;code&gt;hello.js&lt;/code&gt; which loads our JavaScript in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. You’ll be able to re-use this template for almost every JavaScript assignment.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hello.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If we commit those two files to a repository and put it on GitHub, then anyone in the class can &lt;code&gt;git clone&lt;/code&gt; the repository and try the code just by opening the &lt;code&gt;hello.html&lt;/code&gt; file in a browser. (We would of course put in a README if anything needed an explanation.) On GitHub you can find this first commit &lt;a href=&quot;https://github.com/lmullen/how-to-submit-assignment-js/tree/733ea9c6f055e2293ca76584ab278b1fb0515c59&quot;&gt;here&lt;/a&gt; in a sample repository.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://lincolnmullen.com/courses/clio3.2014/img/hello-github.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;But of course I made a mistake on my first attempt. When I open the HTML file and look at the console, instead of my friendly greeting I find an error message.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://lincolnmullen.com/courses/clio3.2014/img/hello-failure.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;What did I do wrong? In my function definition I call the variable &lt;code&gt;msg&lt;/code&gt; in one place and &lt;code&gt;message&lt;/code&gt; in another. I just need to pick one or the other. I pick &lt;code&gt;message&lt;/code&gt;, make the change, commit it, and push the code to GitHub. You can browse the current status &lt;a href=&quot;https://github.com/lmullen/how-to-submit-assignment-js&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now anyone who clones the repository and opens the HTML file will get this nice greeting.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;http://lincolnmullen.com/courses/clio3.2014/img/hello-success.png&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;As a bonus, that person can go back over the repository’s history and try earlier versions. This means we can find the error messages and good (and bad) ideas that we had without having to write down a lot of work.&lt;/p&gt;
&lt;p&gt;Is this nit-picky? Yes. But it really is a “best practice” in that it will discipline your work in ways that will make it better and easier to use. And most importantly, a big part of this course is learning the culture of programming to help you get past the gatekeepers.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/09/09/how-to-submit-an-assignment-js/</link>
        <guid isPermaLink="true">http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/09/09/how-to-submit-an-assignment-js/</guid>
        
        
      </item>
    
      <item>
        <title>Week 2: Reproducible Research</title>
        <description>&lt;h2 id=&quot;reproducible-research&quot;&gt;Reproducible Research&lt;/h2&gt;
&lt;p&gt;Reproducible research is&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;documented,&lt;/li&gt;
&lt;li&gt;version controlled,&lt;/li&gt;
&lt;li&gt;automated with a build script,&lt;/li&gt;
&lt;li&gt;written as a literate program,&lt;/li&gt;
&lt;li&gt;with all dependencies managed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My &lt;a href=&quot;http://dh-r.lincolnmullen.com/reproducible.html&quot;&gt;attempt&lt;/a&gt; at explaining reproducible research.&lt;/p&gt;
&lt;h2 id=&quot;git&quot;&gt;Git&lt;/h2&gt;
&lt;p&gt;Normal work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -a&lt;/code&gt; and &lt;code&gt;git commit -m&lt;/code&gt; and &lt;code&gt;git commit -am&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b branch-name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rebase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When things go bad:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git reset HEAD filename&lt;/code&gt; to unstage&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout file&lt;/code&gt; to revert to HEAD&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff master..branch-name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git blame&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout commit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git revert commit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Good to know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.gitconfig&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gists and Gistup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/&quot;&gt;Gists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mbostock/gistup&quot;&gt;Gistup&lt;/a&gt;: &lt;code&gt;npm install -g gistup&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;picking-topics&quot;&gt;Picking topics&lt;/h2&gt;
&lt;p&gt;Sign up for one of these:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ruby or Python&lt;/li&gt;
&lt;li&gt;XML, Xpath, TEI, Nokogiri/Beautiful Soup&lt;/li&gt;
&lt;li&gt;C or Java&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;SQL and MySQL&lt;/li&gt;
&lt;li&gt;Debugging and/or refactoring&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Stats for historians&lt;/li&gt;
&lt;li&gt;Plugins&lt;/li&gt;
&lt;li&gt;Ruby on Rails or Sinata&lt;/li&gt;
&lt;li&gt;Dat&lt;/li&gt;
&lt;li&gt;Image processing&lt;/li&gt;
&lt;li&gt;Packaging&lt;/li&gt;
&lt;li&gt;Cloud computing: Amazon EC2 etc.&lt;/li&gt;
&lt;li&gt;A portion of any of the topics on the syllabus&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sign-up list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Anne: D3&lt;/li&gt;
&lt;li&gt;Sara: SQL&lt;/li&gt;
&lt;li&gt;Allison: MARC&lt;/li&gt;
&lt;li&gt;Peter: Image processing&lt;/li&gt;
&lt;li&gt;Mandy: Dat&lt;/li&gt;
&lt;li&gt;Janelle: PHP&lt;/li&gt;
&lt;li&gt;George:&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;break&quot;&gt;Break&lt;/h2&gt;
&lt;h2 id=&quot;makefiles&quot;&gt;Makefiles&lt;/h2&gt;
&lt;p&gt;Demonstration of Makefiles&lt;/p&gt;
&lt;p&gt;Our class Makefile:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install Lynx: &lt;code&gt;brew install lynx&lt;/code&gt; or &lt;code&gt;sudo apt-get install lynx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;URL for Tracts for the Times: &lt;code&gt;http://lincolnmullen.com/files/tracts-for-times.zip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/lmullen/d2d0162a0cda6301b748&quot;&gt;Gist of sample Makefile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;more-unix&quot;&gt;More Unix&lt;/h2&gt;
&lt;p&gt;Why Vim keeps popping up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;$EDITOR&lt;/code&gt; shell variable.&lt;/li&gt;
&lt;li&gt;Enough Vim to make you dangerous: &lt;code&gt;i&lt;/code&gt; to insert; &lt;code&gt;ESC&lt;/code&gt; to get back to to command mode; &lt;code&gt;:&lt;/code&gt; to execute a command; &lt;code&gt;:w&lt;/code&gt; to write; &lt;code&gt;:q&lt;/code&gt; to quit; &lt;code&gt;:wq&lt;/code&gt; to write and quit; &lt;code&gt;hjkl&lt;/code&gt; to move around.&lt;/li&gt;
&lt;li&gt;Try &lt;code&gt;export EDITOR=&#39;subl -w&#39;&lt;/code&gt; in your &lt;code&gt;~/.bash_profile&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Another option on Macs is &lt;code&gt;export EDITOR=&#39;open -a TextEdit&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Executable files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Execute a script: &lt;code&gt;Rscript script.R&lt;/code&gt; or &lt;code&gt;ruby script.rb&lt;/code&gt; or &lt;code&gt;node  script.js&lt;/code&gt; or &lt;code&gt;python script.py&lt;/code&gt; or &lt;code&gt;bash script.sh&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The hashbang or shebang: &lt;code&gt;#!&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Execute a script without specifying a command by putting a hashbang at the first line of the file: &lt;code&gt;#!/usr/bin/node&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Except the correct binary for the language might not be in &lt;code&gt;/usr/bin/&lt;/code&gt;, so use &lt;code&gt;#!/usr/bin/env node&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Make a file executable with &lt;code&gt;chmod +x script.js&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;ls -l&lt;/code&gt; to check permissions. &lt;a href=&quot;http://www.linux.com/learn/tutorials/309527-understanding-linux-file-permissions&quot;&gt;Explanation of permissions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;hello-world.js&quot;&gt;hello-world.js&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/lmullen/c2ffb4442adc02bef7a1&quot;&gt;Gist for JavaScript Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Assignment: &lt;code&gt;var a = 20;&lt;/code&gt; or &lt;code&gt;var a = &amp;quot;my own string&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Function definition:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;function myFunction(a) {
  return a + 20;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myFunction = function(a) {
  return a + 20;
}&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;For loop:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;for (i = 0; i &amp;lt; 10; i++) {
  console.log(i);
}&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 03 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/09/03/week-two/</link>
        <guid isPermaLink="true">http://lincolnmullen.com/courses/clio3.2014/courses/clio3.2014/2014/09/03/week-two/</guid>
        
        
      </item>
    
  </channel>
</rss>
